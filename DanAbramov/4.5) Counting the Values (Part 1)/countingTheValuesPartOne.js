console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Undefined ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
/*
  Aparece em algumas situa√ß√µes onde o JavaScript n√£o sabem o valor que voc√™ queria.a
  undefined: valor involuntariamente faltando.
*/
console.log(`Undefined: ${typeof undefined}`); // undefined: valor involuntariamente faltando.

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Null ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
let mimsy = null;
// console.log(mimsy.mood); // TypeError! mimsy > null
console.log(`Null: ${typeof null}`); // Null

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Booleans ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
console.log(`Boolean: ${typeof true || false}`); // Boolean
let isSad = true;
let isHappy = !isSad; // The opposite
let isFeeling = isSad || isHappy; // Is at least one of them true?
let isConfusing = isSad && isHappy; // Are both true?

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Numbers ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
console.log(`typeof 28: ${typeof 28}`); // "number"
console.log(`typeof 3.14: ${typeof 3.14}`); // "number"
console.log(`typeof -140: ${typeof -140}`); // "number"
console.log(`0.1 + 0.2 === 0.3: ${0.1 + 0.2 === 0.3}`); // false
console.log(`0.1 + 0.2 === 0.300000004: ${0.1 + 0.2 === 0.300000004}`); // true

/*
  A entrada anal√≥gica se encaixa nos valores mais pr√≥ximos a ser armazenados, ou seja, digital
  Ambos 0.1 e 0.2 s√£o arredondados para os n√∫meros dispon√≠veis mais
  pr√≥ximos. Os erros de arredondamento se acumulam, portanto, resumindo-os, n√£o
  nos d√° exatamente 0.3.
*/

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Special Numbers ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
let scale = 0;
let a = 1 / scale; // Infinity
let b = 0 / scale; // NaN
let c = -a; // -Infinity
let d = 1 / c; // -0

/*
  Destes n√∫meros especiais, NaN √© particularmente interessante. NaN, que √© o
  resultado de 0 / 0 e outras matem√°ticas inv√°lidas, significa "n√£o √© um n√∫mero".
*/

console.log(`typeof NaN: ${typeof NaN}`); // "number"

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ BigInts ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
let alot = 9007199254740991n;
console.log(`BigInt: ${alot + 1n}`);
/*
  - √ìtimo para c√°lculos financeiros em que a precis√£o √© especialmente importante.
  - h√° um n√∫mero infinito de BigInts - um para cada n√∫mero inteiro em matem√°tica.
*/

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Strings ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
console.log(typeof '„Åì„Çì„Å´„Å°„ÅØ'); // "string"
console.log(typeof '„Åì„Çì„Å´„Å°„ÅØ'); // "string"
console.log(typeof `„Åì„Çì„Å´„Å°„ÅØ`); // "string"
console.log(typeof ''); // "string"
let cat = 'Cheshire';
console.log(`\n\ncat.length: ${cat.length}`); // 8
console.log(`cat[0]: ${cat[0]}`);
console.log(`cat[1]: ${cat[1]}`);
cat[0] = 'HH';
console.log(`cat[0] = 'HH': ${cat[0]}`);
/*
  - Strings s√£o primitivas e imut√°veis
*/

// let isStringAnwer = prompt('Your name'); Typeerror
// console.log(isStringAnwer);

/*
  Fora do nosso modelo mental, a resposta depende de uma implementa√ß√£o
  espec√≠fica. Se uma sequ√™ncia √© representada como um √∫nico bloco de mem√≥ria,
  v√°rios blocos ou uma corda , depende do mecanismo JavaScript
*/

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Symbols ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
let isSymbol = Symbol();
console.log(`\nisSymbol: ${typeof isSymbol}`);

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Objects ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
console.log(`typeof({}) => ${typeof {}}`);
console.log(`typeof([]) => ${typeof []}`);
console.log(`typeof(new Date()) => ${typeof new Date()}`);
console.log(`typeof(/\d+/) => ${typeof /\d+/}`);
console.log(`typeof(Math) => ${typeof Math}`);

/*
  - Objetos incluem arrays, datas, RegExps e outros valores n√£o primitivos.
  - Podemos acess√°-los a partir de . e []
*/

let getNameRapper = { name: 'Malicious' };
console.log(`\ngetNameRapper => ${getNameRapper.name}`);

getNameRapper.name = 'Malice';
console.log(`getNameRapper => ${getNameRapper.name}`);

getNameRapper['name'] = 'No Malice';
console.log(`getNameRapper => ${getNameRapper.name}`);

// Criando objetos literais:
let shrek = {};
let donkey = {};

// Sobre destruir objects
const obj = {};
//obj = null; // TypeError: Assignment to constant variable. N√£o podemos destruir um objeto
delete obj; // {}

// ---
// ---

console.log(`\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è üöÄ Functions ‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è`);
// Fun√ß√£o s√£o valores?
for (let i = 0; i < 7; i++) {
  let dwarf = {};
  console.log(dwarf); // {} {} {} {} {} {} {}
}

for (let i = 0; i < 7; i++) {
  let dig = function() {
    // Do nothing
  };
  console.log(dig); // [Function: dig] [Function: dig] [Function: dig] [Function: dig] [Function: dig] [Function: dig] [Function: dig]
}
// O snippet acima cont√©m uma defini√ß√£o de fun√ß√£o no c√≥digo, mas cria sete valores de fun√ß√£o
/*
- Objetos: um valor para cada literal de objeto que executamos.
- Fun√ß√£o: Um valor para cada defini√ß√£o de fun√ß√£o que executamos.
*/
